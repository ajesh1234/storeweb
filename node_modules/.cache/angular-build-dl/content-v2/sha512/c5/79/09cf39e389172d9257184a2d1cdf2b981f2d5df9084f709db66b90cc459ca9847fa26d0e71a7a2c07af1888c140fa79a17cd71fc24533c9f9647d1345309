(function () {
  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["pages-dashboard-dashboard-module"], {
    /***/
    "/2RN": function RN(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DashboardModule", function () {
        return DashboardModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var ng2_charts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ng2-charts */
      "hrfs");
      /* harmony import */


      var ngx_bootstrap_dropdown__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ngx-bootstrap/dropdown */
      "FE24");
      /* harmony import */


      var ngx_bootstrap_buttons__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ngx-bootstrap/buttons */
      "aHM3");
      /* harmony import */


      var _dashboard_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ./dashboard.component */
      "U5Cf");
      /* harmony import */


      var _dashboard_routing_module__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ./dashboard-routing.module */
      "ea/W");
      /* harmony import */


      var ngx_pagination__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! ngx-pagination */
      "xkgV");
      /* harmony import */


      var ngx_skeleton_loader__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(
      /*! ngx-skeleton-loader */
      "WzhS");
      /* harmony import */


      var ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(
      /*! ngx-bootstrap/modal */
      "LqlI");
      /* harmony import */


      var ngx_spinner__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(
      /*! ngx-spinner */
      "7g+E");
      /* harmony import */


      var ngx_bootstrap_tabs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(
      /*! ngx-bootstrap/tabs */
      "2ZVE");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(
      /*! @angular/common */
      "SVse");

      var DashboardModule = function DashboardModule() {
        _classCallCheck(this, DashboardModule);
      };

      DashboardModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_13__["CommonModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"], _dashboard_routing_module__WEBPACK_IMPORTED_MODULE_7__["DashboardRoutingModule"], ng2_charts__WEBPACK_IMPORTED_MODULE_3__["ChartsModule"], ngx_bootstrap_dropdown__WEBPACK_IMPORTED_MODULE_4__["BsDropdownModule"], ngx_bootstrap_buttons__WEBPACK_IMPORTED_MODULE_5__["ButtonsModule"].forRoot(), ngx_bootstrap_modal__WEBPACK_IMPORTED_MODULE_10__["ModalModule"].forRoot(), ngx_spinner__WEBPACK_IMPORTED_MODULE_11__["NgxSpinnerModule"], ngx_skeleton_loader__WEBPACK_IMPORTED_MODULE_9__["NgxSkeletonLoaderModule"].forRoot({
          animation: 'progress-dark'
        }), ngx_pagination__WEBPACK_IMPORTED_MODULE_8__["NgxPaginationModule"], ngx_bootstrap_tabs__WEBPACK_IMPORTED_MODULE_12__["TabsModule"]],
        declarations: [_dashboard_component__WEBPACK_IMPORTED_MODULE_6__["DashboardComponent"]]
      })], DashboardModule);
      /***/
    },

    /***/
    "Ixm7": function Ixm7(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n<div class=\"animated fadeIn\">\n\n  <div class=\"row\">\n    <div class=\"col-sm-6 col-lg-3\" (click)=\"openPage('products')\">\n      <div class=\"card text-white bg-info\" style=\"cursor: pointer;\">\n        <div class=\"card-body pb-2\">\n\n          <div class=\"text-value\">{{products}} </div>\n          <div> {{util.translate('Total Products')}} </div>\n        </div>\n      </div>\n    </div>\n    <!--/.col-->\n    <div class=\"col-sm-6 col-lg-3\" (click)=\"openPage('reviews')\">\n      <div class=\"card text-white bg-primary\" style=\"cursor: pointer;\">\n        <div class=\"card-body pb-2\">\n\n          <div class=\"text-value\">{{reviews}} </div>\n          <div>{{util.translate('Total Reviews')}} </div>\n        </div>\n\n      </div>\n    </div>\n    <!--/.col-->\n    <div class=\"col-sm-6 col-lg-3\" (click)=\"openPage('dashboard')\">\n      <div class=\"card text-white bg-warning\" style=\"cursor: pointer;\">\n        <div class=\"card-body pb-2\">\n\n          <div class=\"text-value\">{{order}} </div>\n          <div>{{util.translate('Total Orders')}} </div>\n        </div>\n\n      </div>\n    </div>\n    <!--/.col-->\n    <div class=\"col-sm-6 col-lg-3\" (click)=\"openPage('dashboard')\">\n      <div class=\"card text-white bg-danger\" style=\"cursor: pointer;\">\n        <div class=\"card-body pb-2\">\n\n          <div class=\"text-value\">{{ newOrders?.length || '0' }} </div>\n          <div> {{util.translate('New Orders')}} </div>\n        </div>\n\n      </div>\n    </div>\n    <!--/.col-->\n  </div>\n  <!--/.row-->\n\n  <div class=\"row\">\n    <div class=\"col-md-12\">\n      <div class=\"card\">\n        <div class=\"card-header\">\n          {{util.translate('All Orders')}}\n        </div>\n        <div class=\"card-body\">\n          <tabset>\n            <tab heading=\"New Order\">\n              <div style=\"height: 70vh;overflow: scroll;padding: 10px;\">\n                <p *ngIf=\"!dummy?.length && !newOrders?.length\" class=\"ion-text-center\">\n                  {{util.translate('No New Orders Found')}}\n                </p>\n                <div class=\"card_div\" *ngFor=\"let item of newOrders\" (click)=\"goToOrder(item)\">\n\n                  <div class=\"image_div\">\n                    <img [src]=\"api.imageUrl+ item.orders[0].cover\" onError=\"this.src='assets/imgs/user.png'\">\n                  </div>\n                  <div class=\"desc_div\">\n                    <p style=\"font-weight: bold;color: gray;font-size: 12px;\"> {{util.translate('ORDER')}}\n                      #{{item.id}}\n                    </p>\n                    <div *ngIf=\"item.orders?.length\" class=\"border_bottom\">\n                      <p *ngFor=\"let order of item.orders;let ol = index\" class=\"items\">\n                        <span *ngIf=\"order.size == 0 \">{{order.name}} -\n                          <span *ngIf=\"order.have_gram == 1\"> {{order.gram}} {{util.translate('grams')}} </span>\n                          <span *ngIf=\"order.have_kg == 1\"> {{order.kg}} {{util.translate('kg')}} </span>\n                          <span *ngIf=\"order.have_liter ==1\"> {{order.liter}} {{util.translate('ltr')}} </span>\n                          <span *ngIf=\"order.have_ml ==1\"> {{order.ml}} {{util.translate('ml')}} </span>\n                          <span *ngIf=\"order.have_pcs == 1\"> {{order.pcs}} {{util.translate('pcs')}} </span>\n\n                          <span *ngIf=\"util.cside =='left'\">\n                            {{util.currecny}} {{order.discount ==0 ? order.original_price : order.sell_price}}\n                          </span>\n                          <span *ngIf=\"util.cside =='right'\">\n                            {{order.discount ==0 ? order.original_price : order.sell_price}} {{util.currecny}}\n                          </span>\n\n                        </span>\n                        <span *ngIf=\"order.size == 1\">\n                          {{order.name}} - <span> {{order.variations[0].items[order.variant].title}} </span>\n                          <span *ngIf=\"util.cside =='left'\">\n                            {{util.currecny}} {{order.discount ==0 ? order.original_price : order.sell_price}}\n                          </span>\n                          <span *ngIf=\"util.cside =='right'\">\n                            {{order.discount ==0 ? order.original_price : order.sell_price}} {{util.currecny}}\n                          </span>\n                        </span>\n                        <span>X {{order.quantiy}}</span>\n\n                      </p>\n\n                    </div>\n                    <p class=\"datetime\">{{ item.date_time}}</p>\n                  </div>\n                  <div class=\"status\" style=\"background: #f86c6b !important;\">\n                    {{item.storeStatus}}\n                  </div>\n                </div>\n\n                <div class=\"card_div_skel\" *ngFor=\"let item of dummy\">\n                  <div *ngFor=\"let item of [1,2,3,4,5]\" style=\"width: 100%;\">\n                    <ngx-skeleton-loader count=\"1\" appearance=\"line\" style=\"width: 100%;height: 10px;\">\n                    </ngx-skeleton-loader>\n                  </div>\n                </div>\n              </div>\n            </tab>\n            <tab heading=\"Out for delivery Order\">\n              <div style=\"height: 70vh;overflow: scroll;padding: 10px;\">\n                <p *ngIf=\"!dummy?.length && !onGoingOrders?.length\" class=\"ion-text-center\">\n                  {{util.translate('No Orders Found')}}\n                </p>\n                <div class=\"card_div\" *ngFor=\"let item of onGoingOrders\" (click)=\"goToOrder(item)\">\n\n                  <div class=\"image_div\">\n                    <img [src]=\"api.imageUrl+ item.orders[0].cover\" onError=\"this.src='assets/imgs/user.png'\">\n                  </div>\n                  <div class=\"desc_div\">\n                    <p style=\"font-weight: bold;color: gray;font-size: 12px;\"> {{util.translate('ORDER')}}\n                      #{{item.id}}\n                    </p>\n                    <div *ngIf=\"item.orders?.length\" class=\"border_bottom\">\n                      <p *ngFor=\"let order of item.orders;let ol = index\" class=\"items\">\n                        <span *ngIf=\"order.size == 0 \">{{order.name}} -\n                          <span *ngIf=\"order.have_gram == 1\"> {{order.gram}} {{util.translate('grams')}} </span>\n                          <span *ngIf=\"order.have_kg == 1\"> {{order.kg}} {{util.translate('kg')}} </span>\n                          <span *ngIf=\"order.have_liter ==1\"> {{order.liter}} {{util.translate('ltr')}} </span>\n                          <span *ngIf=\"order.have_ml ==1\"> {{order.ml}} {{util.translate('ml')}} </span>\n                          <span *ngIf=\"order.have_pcs == 1\"> {{order.pcs}} {{util.translate('pcs')}} </span>\n\n                          <span *ngIf=\"util.cside =='left'\">\n                            {{util.currecny}} {{order.discount ==0 ? order.original_price : order.sell_price}}\n                          </span>\n                          <span *ngIf=\"util.cside =='right'\">\n                            {{order.discount ==0 ? order.original_price : order.sell_price}} {{util.currecny}}\n                          </span>\n\n                        </span>\n                        <span *ngIf=\"order.size == 1\">\n                          {{order.name}} - <span> {{order.variations[0].items[order.variant].title}} </span>\n                          <span *ngIf=\"util.cside =='left'\">\n                            {{util.currecny}} {{order.discount ==0 ? order.original_price : order.sell_price}}\n                          </span>\n                          <span *ngIf=\"util.cside =='right'\">\n                            {{order.discount ==0 ? order.original_price : order.sell_price}} {{util.currecny}}\n                          </span>\n                        </span>\n                        <span>X {{order.quantiy}}</span>\n\n                      </p>\n\n                    </div>\n                    <p class=\"datetime\">{{ item.date_time}}</p>\n                  </div>\n                  <div class=\"status\">\n                    {{util.translate(item.storeStatus)}}\n                  </div>\n                </div>\n                <div class=\"card_div_skel\" *ngFor=\"let item of dummy\">\n                  <div *ngFor=\"let item of [1,2,3,4,5]\" style=\"width: 100%;\">\n                    <ngx-skeleton-loader count=\"1\" appearance=\"line\" style=\"width: 100%;height: 10px;\">\n                    </ngx-skeleton-loader>\n                  </div>\n                </div>\n              </div>\n            </tab>\n            <tab heading=\"Pick-up Order\">\n              <div style=\"height: 70vh;overflow: scroll;padding: 10px;\">\n                <p *ngIf=\"!dummy?.length && !onPickOrders?.length\" class=\"ion-text-center\">\n                  {{util.translate('No Orders Found')}}\n                </p>\n                <div class=\"card_div\" *ngFor=\"let item of onPickOrders\" (click)=\"goToOrder(item)\">\n\n                  <div class=\"image_div\">\n                    <img [src]=\"api.imageUrl+ item.orders[0].cover\" onError=\"this.src='assets/imgs/user.png'\">\n                  </div>\n                  <div class=\"desc_div\">\n                    <p style=\"font-weight: bold;color: gray;font-size: 12px;\"> {{util.translate('ORDER')}}\n                      #{{item.id}}\n                    </p>\n                    <div *ngIf=\"item.orders?.length\" class=\"border_bottom\">\n                      <p *ngFor=\"let order of item.orders;let ol = index\" class=\"items\">\n                        <span *ngIf=\"order.size == 0 \">{{order.name}} -\n                          <span *ngIf=\"order.have_gram == 1\"> {{order.gram}} {{util.translate('grams')}} </span>\n                          <span *ngIf=\"order.have_kg == 1\"> {{order.kg}} {{util.translate('kg')}} </span>\n                          <span *ngIf=\"order.have_liter ==1\"> {{order.liter}} {{util.translate('ltr')}} </span>\n                          <span *ngIf=\"order.have_ml ==1\"> {{order.ml}} {{util.translate('ml')}} </span>\n                          <span *ngIf=\"order.have_pcs == 1\"> {{order.pcs}} {{util.translate('pcs')}} </span>\n\n                          <span *ngIf=\"util.cside =='left'\">\n                            {{util.currecny}} {{order.discount ==0 ? order.original_price : order.sell_price}}\n                          </span>\n                          <span *ngIf=\"util.cside =='right'\">\n                            {{order.discount ==0 ? order.original_price : order.sell_price}} {{util.currecny}}\n                          </span>\n\n                        </span>\n                        <span *ngIf=\"order.size == 1\">\n                          {{order.name}} - <span> {{order.variations[0].items[order.variant].title}} </span>\n                          <span *ngIf=\"util.cside =='left'\">\n                            {{util.currecny}} {{order.discount ==0 ? order.original_price : order.sell_price}}\n                          </span>\n                          <span *ngIf=\"util.cside =='right'\">\n                            {{order.discount ==0 ? order.original_price : order.sell_price}} {{util.currecny}}\n                          </span>\n                        </span>\n                        <span>X {{order.quantiy}}</span>\n\n                      </p>\n\n                    </div>\n                    <p class=\"datetime\">{{ item.date_time}}</p>\n                  </div>\n                  <div class=\"status\">\n                    {{util.translate('Self Pickup')}}\n                  </div>\n                </div>\n                <div class=\"card_div_skel\" *ngFor=\"let item of dummy\">\n                  <div *ngFor=\"let item of [1,2,3,4,5]\" style=\"width: 100%;\">\n                    <ngx-skeleton-loader count=\"1\" appearance=\"line\" style=\"width: 100%;height: 10px;\">\n                    </ngx-skeleton-loader>\n                  </div>\n                </div>\n              </div>\n            </tab>\n            <tab heading=\"Past Order\">\n              <div style=\"height: 70vh;overflow: scroll;padding: 10px;\">\n                <p *ngIf=\"!dummy?.length && !olders?.length\" class=\"ion-text-center\">\n                  {{util.translate('No New Orders Found')}}\n                </p>\n                <div class=\"card_div\" *ngFor=\"let item of olders\" (click)=\"goToOrder(item)\">\n\n                  <div class=\"image_div\">\n                    <img [src]=\"api.imageUrl+ item.orders[0].cover\" onError=\"this.src='assets/imgs/user.png'\">\n                  </div>\n                  <div class=\"desc_div\">\n                    <p style=\"font-weight: bold;color: gray;font-size: 12px;\"> {{util.translate('ORDER')}}\n                      #{{item.id}}\n                    </p>\n                    <div *ngIf=\"item.orders?.length\" class=\"border_bottom\">\n                      <p *ngFor=\"let order of item.orders;let ol = index\" class=\"items\">\n                        <span *ngIf=\"order.size == 0 \">{{order.name}} -\n                          <span *ngIf=\"order.have_gram == 1\"> {{order.gram}} {{util.translate('grams')}} </span>\n                          <span *ngIf=\"order.have_kg == 1\"> {{order.kg}} {{util.translate('kg')}} </span>\n                          <span *ngIf=\"order.have_liter ==1\"> {{order.liter}} {{util.translate('ltr')}} </span>\n                          <span *ngIf=\"order.have_ml ==1\"> {{order.ml}} {{util.translate('ml')}} </span>\n                          <span *ngIf=\"order.have_pcs == 1\"> {{order.pcs}} {{util.translate('pcs')}} </span>\n\n                          <span *ngIf=\"util.cside =='left'\">\n                            {{util.currecny}} {{order.discount ==0 ? order.original_price : order.sell_price}}\n                          </span>\n                          <span *ngIf=\"util.cside =='right'\">\n                            {{order.discount ==0 ? order.original_price : order.sell_price}} {{util.currecny}}\n                          </span>\n\n                        </span>\n                        <span *ngIf=\"order.size == 1\">\n                          {{order.name}} - <span> {{order.variations[0].items[order.variant].title}} </span>\n                          <span *ngIf=\"util.cside =='left'\">\n                            {{util.currecny}} {{order.discount ==0 ? order.original_price : order.sell_price}}\n                          </span>\n                          <span *ngIf=\"util.cside =='right'\">\n                            {{order.discount ==0 ? order.original_price : order.sell_price}} {{util.currecny}}\n                          </span>\n                        </span>\n                        <span>X {{order.quantiy}}</span>\n\n                      </p>\n\n                    </div>\n                    <p class=\"datetime\">{{ item.date_time}}</p>\n                  </div>\n                  <div class=\"status\" style=\"background: red !important;\">\n                    {{item.storeStatus}}\n                  </div>\n                </div>\n\n                <div class=\"card_div_skel\" *ngFor=\"let item of dummy\">\n                  <div *ngFor=\"let item of [1,2,3,4,5]\" style=\"width: 100%;\">\n                    <ngx-skeleton-loader count=\"1\" appearance=\"line\" style=\"width: 100%;height: 10px;\">\n                    </ngx-skeleton-loader>\n                  </div>\n                </div>\n              </div>\n            </tab>\n          </tabset>\n        </div>\n      </div>\n    </div>\n    <!--/.col-->\n  </div>\n\n</div>";
      /***/
    },

    /***/
    "U5Cf": function U5Cf(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DashboardComponent", function () {
        return DashboardComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_dashboard_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./dashboard.component.html */
      "Ixm7");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var moment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! moment */
      "wd/R");
      /* harmony import */


      var moment__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_4__);
      /* harmony import */


      var _services_api_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../../services/api.service */
      "H+bZ");
      /* harmony import */


      var _services_util_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../services/util.service */
      "2Rin");

      var DashboardComponent = /*#__PURE__*/function () {
        function DashboardComponent(api, util, router) {
          _classCallCheck(this, DashboardComponent);

          this.api = api;
          this.util = util;
          this.router = router;
          this.newOrders = [];
          this.onGoingOrders = [];
          this.onPickOrders = [];
          this.oldOrders = [];
          this.dummy = Array(5);
          this.olders = [];
          this.order = 0;
          this.reviews = 0;
          this.products = 0;
          this.getHome();
          this.getUserByID();
        }

        _createClass(DashboardComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {}
        }, {
          key: "openPage",
          value: function openPage(url) {
            this.router.navigate([url]);
          }
        }, {
          key: "getHome",
          value: function getHome() {
            var _this = this;

            var param = {
              id: localStorage.getItem('uid')
            };
            this.api.post_private('v1/home/getStoreDashboard', param).then(function (data) {
              console.log('by store id', data);

              if (data && data.status && data.status == 200) {
                _this.order = data.data.orders;
                _this.reviews = data.data.reviews;
                _this.products = data.data.products;

                _this.getOrders();
              }
            }, function (error) {
              console.log(error);

              _this.util.apiErrorHandler(error);
            })["catch"](function (error) {
              console.log(error);

              _this.util.apiErrorHandler(error);
            });
          }
        }, {
          key: "getOrders",
          value: function getOrders() {
            var _this2 = this;

            var param = {
              id: localStorage.getItem('uid'),
              limit: 5000000
            };
            this.api.post_private('v1/orders/getByStoreForApps', param).then(function (data) {
              console.log('by store id', data);
              _this2.dummy = [];
              _this2.newOrders = [];
              _this2.onGoingOrders = [];
              _this2.onPickOrders = [];
              _this2.oldOrders = [];
              _this2.olders = [];

              if (data && data.status && data.status == 200 && data.data.length > 0) {
                data.data.forEach(function (element, index) {
                  return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this2, void 0, void 0, /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                    var info, selected, status;
                    return regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            if (!function (x) {
                              try {
                                JSON.parse(x);
                                return true;
                              } catch (e) {
                                return false;
                              }
                            }(element.orders)) {
                              _context.next = 7;
                              break;
                            }

                            element.orders = JSON.parse(element.orders);
                            element.date_time = moment__WEBPACK_IMPORTED_MODULE_4__(element.date_time).format('dddd, MMMM Do YYYY');
                            _context.next = 5;
                            return element.orders.filter(function (x) {
                              return x.store_id == localStorage.getItem('uid');
                            });

                          case 5:
                            element.orders = _context.sent;

                            if (function (x) {
                              try {
                                JSON.parse(x);
                                return true;
                              } catch (e) {
                                return false;
                              }
                            }(element.status)) {
                              info = JSON.parse(element.status);
                              selected = info.filter(function (x) {
                                return x.id == localStorage.getItem('uid');
                              });

                              if (selected && selected.length) {
                                element.orders.forEach(function (order) {
                                  if (order.variations && order.variations !== '' && typeof order.variations == 'string') {
                                    console.log('strings', element.id);
                                    order.variations = JSON.parse(order.variations);
                                    console.log(order['variant']);

                                    if (order["variant"] == undefined) {
                                      order['variant'] = 0;
                                    }
                                  }
                                });
                                status = selected[0].status;
                                element['storeStatus'] = status;

                                if (status == 'created') {
                                  this.newOrders.push(element);
                                } else if (element.order_to == 'home' && (status == 'accepted' || status == 'picked' || status == 'ongoing')) {
                                  this.onGoingOrders.push(element);
                                } else if (element.order_to == 'store' && (status == 'accepted' || status == 'picked' || status == 'ongoing')) {
                                  this.onPickOrders.push(element);
                                } else if (status == 'rejected' || status == 'cancelled' || status == 'delivered' || status == 'refund') {
                                  this.olders.push(element);
                                }
                              }
                            }

                          case 7:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee, this);
                  }));
                });
                console.log('older', _this2.olders);
                console.log('new ', _this2.newOrders);
                console.log('ongo ', _this2.onGoingOrders);
                console.log('pick ', _this2.onPickOrders);
              }
            }, function (error) {
              console.log(error);
              _this2.dummy = [];

              _this2.util.apiErrorHandler(error);
            })["catch"](function (error) {
              console.log(error);
              _this2.dummy = [];

              _this2.util.apiErrorHandler(error);
            });
          }
        }, {
          key: "goToOrder",
          value: function goToOrder(item) {
            console.log(item);
            var navData = {
              queryParams: {
                id: item.id
              }
            };
            this.router.navigate(['/order-detail'], navData);
          }
        }, {
          key: "getUserByID",
          value: function getUserByID() {
            var _this3 = this;

            var body = {
              id: localStorage.getItem('uid')
            };
            this.api.post_private('v1/profile/getStoreFromId', body).then(function (data) {
              console.log(">>>>><<<<<", data);

              if (data && data.success && data.status === 200) {
                _this3.util.userInfo = data.data;
                localStorage.setItem('name', data.data.first_name + ' ' + data.data.last_name);
                _this3.util.store = data.store;
              } else {
                localStorage.removeItem('uid');
                localStorage.removeItem('token');
              }
            }, function (err) {
              localStorage.removeItem('uid');
              localStorage.removeItem('token');
              _this3.util.userInfo = null;
              console.log(err);
            })["catch"](function (err) {
              localStorage.removeItem('uid');
              localStorage.removeItem('token');
              _this3.util.userInfo = null;
              console.log(err);
            });
          }
        }]);

        return DashboardComponent;
      }();

      DashboardComponent.ctorParameters = function () {
        return [{
          type: _services_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"]
        }, {
          type: _services_util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"]
        }, {
          type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]
        }];
      };

      DashboardComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Component"])({
        template: _raw_loader_dashboard_component_html__WEBPACK_IMPORTED_MODULE_1__["default"]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_services_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"], _services_util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"], _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"]])], DashboardComponent);
      /***/
    },

    /***/
    "aHM3": function aHM3(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonCheckboxDirective", function () {
        return ButtonCheckboxDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonRadioDirective", function () {
        return ButtonRadioDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonRadioGroupDirective", function () {
        return ButtonRadioGroupDirective;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ButtonsModule", function () {
        return ButtonsModule;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵa", function () {
        return CHECKBOX_CONTROL_VALUE_ACCESSOR;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵb", function () {
        return RADIO_CONTROL_VALUE_ACCESSOR$1;
      });
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ɵc", function () {
        return RADIO_CONTROL_VALUE_ACCESSOR;
      });
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      // TODO: config: activeClass - Class to apply to the checked buttons

      /** @type {?} */


      var CHECKBOX_CONTROL_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],

        /* tslint:disable-next-line: no-use-before-declare */
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return ButtonCheckboxDirective;
        }),
        multi: true
      };
      /**
       * Add checkbox functionality to any element
       */

      var ButtonCheckboxDirective = /*#__PURE__*/function () {
        function ButtonCheckboxDirective() {
          _classCallCheck(this, ButtonCheckboxDirective);

          /**
           * Truthy value, will be set to ngModel
           */
          this.btnCheckboxTrue = true;
          /**
           * Falsy value, will be set to ngModel
           */

          this.btnCheckboxFalse = false;
          this.state = false;
          this.onChange = Function.prototype;
          this.onTouched = Function.prototype;
        } // view -> model

        /**
         * @return {?}
         */


        _createClass(ButtonCheckboxDirective, [{
          key: "onClick",
          value: function onClick() {
            if (this.isDisabled) {
              return;
            }

            this.toggle(!this.state);
            this.onChange(this.value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.toggle(this.trueValue === this.value);
          }
          /**
           * @protected
           * @return {?}
           */

        }, {
          key: "trueValue",
          get: function get() {
            return typeof this.btnCheckboxTrue !== 'undefined' ? this.btnCheckboxTrue : true;
          }
          /**
           * @protected
           * @return {?}
           */

        }, {
          key: "falseValue",
          get: function get() {
            return typeof this.btnCheckboxFalse !== 'undefined' ? this.btnCheckboxFalse : false;
          }
          /**
           * @param {?} state
           * @return {?}
           */

        }, {
          key: "toggle",
          value: function toggle(state) {
            this.state = state;
            this.value = this.state ? this.trueValue : this.falseValue;
          } // ControlValueAccessor
          // model -> view

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.state = this.trueValue === value;
            this.value = value ? this.trueValue : this.falseValue;
          }
          /**
           * @param {?} isDisabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(isDisabled) {
            this.isDisabled = isDisabled;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
        }]);

        return ButtonCheckboxDirective;
      }();

      ButtonCheckboxDirective.ɵfac = function ButtonCheckboxDirective_Factory(t) {
        return new (t || ButtonCheckboxDirective)();
      };

      ButtonCheckboxDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ButtonCheckboxDirective,
        selectors: [["", "btnCheckbox", ""]],
        hostVars: 3,
        hostBindings: function ButtonCheckboxDirective_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ButtonCheckboxDirective_click_HostBindingHandler() {
              return ctx.onClick();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("aria-pressed", ctx.state);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("active", ctx.state);
          }
        },
        inputs: {
          btnCheckboxTrue: "btnCheckboxTrue",
          btnCheckboxFalse: "btnCheckboxFalse"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([CHECKBOX_CONTROL_VALUE_ACCESSOR])]
      });
      ButtonCheckboxDirective.propDecorators = {
        btnCheckboxTrue: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        btnCheckboxFalse: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        state: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.active']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['attr.aria-pressed']
        }],
        onClick: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['click']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ButtonCheckboxDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[btnCheckbox]',
            providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]
          }]
        }], function () {
          return [];
        }, {
          btnCheckboxTrue: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          btnCheckboxFalse: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          state: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['class.active']
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['attr.aria-pressed']
          }],
          // view -> model

          /**
           * @return {?}
           */
          onClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['click']
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var RADIO_CONTROL_VALUE_ACCESSOR = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],

        /* tslint:disable-next-line: no-use-before-declare */
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return ButtonRadioDirective;
        }),
        multi: true
      };
      /**
       * Create radio buttons or groups of buttons.
       * A value of a selected button is bound to a variable specified via ngModel.
       */

      var ButtonRadioDirective = /*#__PURE__*/function () {
        /**
         * @param {?} el
         * @param {?} cdr
         * @param {?} renderer
         * @param {?} group
         */
        function ButtonRadioDirective(el, cdr, renderer, group) {
          _classCallCheck(this, ButtonRadioDirective);

          this.el = el;
          this.cdr = cdr;
          this.renderer = renderer;
          this.group = group;
          this.onChange = Function.prototype;
          this.onTouched = Function.prototype;
          this.role = 'radio';
          this._hasFocus = false;
        }
        /**
         * Current value of radio component or group
         * @return {?}
         */


        _createClass(ButtonRadioDirective, [{
          key: "value",
          get: function get() {
            return this.group ? this.group.value : this._value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            if (this.group) {
              this.group.value = value;
              return;
            }

            this._value = value;
          }
          /**
           * If `true` — radio button is disabled
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @param {?} disabled
           * @return {?}
           */
          ,
          set: function set(disabled) {
            this.setDisabledState(disabled);
          }
          /**
           * @return {?}
           */

        }, {
          key: "controlOrGroupDisabled",
          get: function get() {
            return this.disabled || this.group && this.group.disabled ? true : undefined;
          }
          /**
           * @return {?}
           */

        }, {
          key: "hasDisabledClass",
          get: function get() {
            // Although the radio is disabled the active radio should still stand out.
            // The disabled class will prevent this so don't add it on the active radio
            return this.controlOrGroupDisabled && !this.isActive;
          }
          /**
           * @return {?}
           */

        }, {
          key: "isActive",
          get: function get() {
            return this.btnRadio === this.value;
          }
          /**
           * @return {?}
           */

        }, {
          key: "tabindex",
          get: function get() {
            if (this.controlOrGroupDisabled) {
              // Disabled radio buttons should not receive focus
              return undefined;
            } else if (this.isActive || this.group == null) {
              return 0;
            } else {
              return -1;
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "hasFocus",
          get: function get() {
            return this._hasFocus;
          }
          /**
           * @return {?}
           */

        }, {
          key: "toggleIfAllowed",
          value: function toggleIfAllowed() {
            if (!this.canToggle()) {
              return;
            }

            this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;

            this._onChange(this.value);
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "onSpacePressed",
          value: function onSpacePressed(event) {
            this.toggleIfAllowed();
            event.preventDefault();
          }
          /**
           * @return {?}
           */

        }, {
          key: "focus",
          value: function focus() {
            this.el.nativeElement.focus();
          }
          /**
           * @return {?}
           */

        }, {
          key: "onFocus",
          value: function onFocus() {
            this._hasFocus = true;
          }
          /**
           * @return {?}
           */

        }, {
          key: "onBlur",
          value: function onBlur() {
            this._hasFocus = false;
            this.onTouched();
          }
          /**
           * @return {?}
           */

        }, {
          key: "canToggle",
          value: function canToggle() {
            return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "ngOnInit",
          value: function ngOnInit() {
            this.uncheckable = typeof this.uncheckable !== 'undefined';
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "_onChange",
          value: function _onChange(value) {
            if (this.group) {
              this.group.value = value;
              return;
            }

            this.onTouched();
            this.onChange(value);
          } // ControlValueAccessor
          // model -> view

          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this.value = value;
            this.cdr.markForCheck();
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * @param {?} disabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(disabled) {
            this._disabled = disabled;

            if (disabled) {
              this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');
              return;
            }

            this.renderer.removeAttribute(this.el.nativeElement, 'disabled');
          }
        }]);

        return ButtonRadioDirective;
      }();

      ButtonRadioDirective.ɵfac = function ButtonRadioDirective_Factory(t) {
        return new (t || ButtonRadioDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return ButtonRadioGroupDirective;
        }), 8));
      };

      ButtonRadioDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ButtonRadioDirective,
        selectors: [["", "btnRadio", ""]],
        hostVars: 8,
        hostBindings: function ButtonRadioDirective_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function ButtonRadioDirective_click_HostBindingHandler() {
              return ctx.toggleIfAllowed();
            })("keydown.space", function ButtonRadioDirective_keydown_space_HostBindingHandler($event) {
              return ctx.onSpacePressed($event);
            })("focus", function ButtonRadioDirective_focus_HostBindingHandler() {
              return ctx.onFocus();
            })("blur", function ButtonRadioDirective_blur_HostBindingHandler() {
              return ctx.onBlur();
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("role", ctx.role)("aria-disabled", ctx.controlOrGroupDisabled)("aria-checked", ctx.isActive)("tabindex", ctx.tabindex);

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("disabled", ctx.hasDisabledClass)("active", ctx.isActive);
          }
        },
        inputs: {
          value: "value",
          disabled: "disabled",
          uncheckable: "uncheckable",
          btnRadio: "btnRadio"
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([RADIO_CONTROL_VALUE_ACCESSOR])]
      });
      /** @nocollapse */

      ButtonRadioDirective.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
        }, {
          type: ButtonRadioGroupDirective,
          decorators: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
            /**
            * @return {?}
            */
            function () {
              return ButtonRadioGroupDirective;
            })]
          }]
        }];
      };

      ButtonRadioDirective.propDecorators = {
        btnRadio: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        uncheckable: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        value: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        disabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }],
        controlOrGroupDisabled: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['attr.aria-disabled']
        }],
        hasDisabledClass: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.disabled']
        }],
        isActive: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['class.active']
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['attr.aria-checked']
        }],
        role: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['attr.role']
        }],
        tabindex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['attr.tabindex']
        }],
        toggleIfAllowed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['click']
        }],
        onSpacePressed: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['keydown.space', ['$event']]
        }],
        onFocus: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['focus']
        }],
        onBlur: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['blur']
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ButtonRadioDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[btnRadio]',
            providers: [RADIO_CONTROL_VALUE_ACCESSOR]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"]
          }, {
            type: ButtonRadioGroupDirective,
            decorators: [{
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
              type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
              args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
              /**
              * @return {?}
              */
              function () {
                return ButtonRadioGroupDirective;
              })]
            }]
          }];
        }, {
          role: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['attr.role']
          }],
          value: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          disabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          controlOrGroupDisabled: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['attr.aria-disabled']
          }],
          hasDisabledClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['class.disabled']
          }],
          isActive: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['class.active']
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['attr.aria-checked']
          }],
          tabindex: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['attr.tabindex']
          }],

          /**
           * @return {?}
           */
          toggleIfAllowed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['click']
          }],

          /**
           * @param {?} event
           * @return {?}
           */
          onSpacePressed: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['keydown.space', ['$event']]
          }],

          /**
           * @return {?}
           */
          onFocus: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['focus']
          }],

          /**
           * @return {?}
           */
          onBlur: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['blur']
          }],
          uncheckable: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }],
          btnRadio: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /** @type {?} */


      var RADIO_CONTROL_VALUE_ACCESSOR$1 = {
        provide: _angular_forms__WEBPACK_IMPORTED_MODULE_1__["NG_VALUE_ACCESSOR"],

        /* tslint:disable-next-line: no-use-before-declare */
        useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
        /**
        * @return {?}
        */
        function () {
          return ButtonRadioGroupDirective;
        }),
        multi: true
      };
      /**
       * A group of radio buttons.
       * A value of a selected button is bound to a variable specified via ngModel.
       */

      var ButtonRadioGroupDirective = /*#__PURE__*/function () {
        /**
         * @param {?} cdr
         */
        function ButtonRadioGroupDirective(cdr) {
          _classCallCheck(this, ButtonRadioGroupDirective);

          this.cdr = cdr;
          this.onChange = Function.prototype;
          this.onTouched = Function.prototype;
          this.role = 'radiogroup';
        }
        /**
         * @return {?}
         */


        _createClass(ButtonRadioGroupDirective, [{
          key: "value",
          get: function get() {
            return this._value;
          }
          /**
           * @param {?} value
           * @return {?}
           */
          ,
          set: function set(value) {
            this._value = value;
            this.onChange(value);
          }
          /**
           * @return {?}
           */

        }, {
          key: "tabindex",
          get: function get() {
            if (this._disabled) {
              return null;
            } else {
              return 0;
            }
          }
          /**
           * @param {?} value
           * @return {?}
           */

        }, {
          key: "writeValue",
          value: function writeValue(value) {
            this._value = value;
            this.cdr.markForCheck();
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnChange",
          value: function registerOnChange(fn) {
            this.onChange = fn;
          }
          /**
           * @param {?} fn
           * @return {?}
           */

        }, {
          key: "registerOnTouched",
          value: function registerOnTouched(fn) {
            this.onTouched = fn;
          }
          /**
           * @param {?} disabled
           * @return {?}
           */

        }, {
          key: "setDisabledState",
          value: function setDisabledState(disabled) {
            if (this.radioButtons) {
              this._disabled = disabled;
              this.radioButtons.forEach(
              /**
              * @param {?} buttons
              * @return {?}
              */
              function (buttons) {
                buttons.setDisabledState(disabled);
              });
              this.cdr.markForCheck();
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onFocus",
          value: function onFocus() {
            if (this._disabled) {
              return;
            }
            /** @type {?} */


            var activeRadio = this.getActiveOrFocusedRadio();

            if (activeRadio) {
              activeRadio.focus();
            } else {
              /** @type {?} */
              var firstEnabled = this.radioButtons.find(
              /**
              * @param {?} r
              * @return {?}
              */
              function (r) {
                return !r.disabled;
              });

              if (firstEnabled) {
                firstEnabled.focus();
              }
            }
          }
          /**
           * @return {?}
           */

        }, {
          key: "onBlur",
          value: function onBlur() {
            if (this.onTouched) {
              this.onTouched();
            }
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "selectNext",
          value: function selectNext(event) {
            this.selectInDirection('next');
            event.preventDefault();
          }
          /**
           * @param {?} event
           * @return {?}
           */

        }, {
          key: "selectPrevious",
          value: function selectPrevious(event) {
            this.selectInDirection('previous');
            event.preventDefault();
          }
          /**
           * @return {?}
           */

        }, {
          key: "disabled",
          get: function get() {
            return this._disabled;
          }
          /**
           * @private
           * @param {?} direction
           * @return {?}
           */

        }, {
          key: "selectInDirection",
          value: function selectInDirection(direction) {
            if (this._disabled) {
              return;
            }
            /**
             * @param {?} currentIndex
             * @param {?} buttonRadioDirectives
             * @return {?}
             */


            function nextIndex(currentIndex, buttonRadioDirectives) {
              /** @type {?} */
              var step = direction === 'next' ? 1 : -1;
              /** @type {?} */

              var calcIndex = (currentIndex + step) % buttonRadioDirectives.length;

              if (calcIndex < 0) {
                calcIndex = buttonRadioDirectives.length - 1;
              }

              return calcIndex;
            }
            /** @type {?} */


            var activeRadio = this.getActiveOrFocusedRadio();

            if (activeRadio) {
              /** @type {?} */
              var buttonRadioDirectives = this.radioButtons.toArray();
              /** @type {?} */

              var currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);

              for (var i = nextIndex(currentActiveIndex, buttonRadioDirectives); i !== currentActiveIndex; i = nextIndex(i, buttonRadioDirectives)) {
                if (buttonRadioDirectives[i].canToggle()) {
                  buttonRadioDirectives[i].toggleIfAllowed();
                  buttonRadioDirectives[i].focus();
                  break;
                }
              }
            }
          }
          /**
           * @private
           * @return {?}
           */

        }, {
          key: "getActiveOrFocusedRadio",
          value: function getActiveOrFocusedRadio() {
            return this.radioButtons.find(
            /**
            * @param {?} button
            * @return {?}
            */
            function (button) {
              return button.isActive;
            }) || this.radioButtons.find(
            /**
            * @param {?} button
            * @return {?}
            */
            function (button) {
              return button.hasFocus;
            });
          }
        }]);

        return ButtonRadioGroupDirective;
      }();

      ButtonRadioGroupDirective.ɵfac = function ButtonRadioGroupDirective_Factory(t) {
        return new (t || ButtonRadioGroupDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]));
      };

      ButtonRadioGroupDirective.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
        type: ButtonRadioGroupDirective,
        selectors: [["", "btnRadioGroup", ""]],
        contentQueries: function ButtonRadioGroupDirective_ContentQueries(rf, ctx, dirIndex) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵcontentQuery"](dirIndex, ButtonRadioDirective, 0);
          }

          if (rf & 2) {
            var _t;

            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.radioButtons = _t);
          }
        },
        hostVars: 2,
        hostBindings: function ButtonRadioGroupDirective_HostBindings(rf, ctx) {
          if (rf & 1) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focus", function ButtonRadioGroupDirective_focus_HostBindingHandler() {
              return ctx.onFocus();
            })("blur", function ButtonRadioGroupDirective_blur_HostBindingHandler() {
              return ctx.onBlur();
            })("keydown.ArrowRight", function ButtonRadioGroupDirective_keydown_ArrowRight_HostBindingHandler($event) {
              return ctx.selectNext($event);
            })("keydown.ArrowDown", function ButtonRadioGroupDirective_keydown_ArrowDown_HostBindingHandler($event) {
              return ctx.selectNext($event);
            })("keydown.ArrowLeft", function ButtonRadioGroupDirective_keydown_ArrowLeft_HostBindingHandler($event) {
              return ctx.selectPrevious($event);
            })("keydown.ArrowUp", function ButtonRadioGroupDirective_keydown_ArrowUp_HostBindingHandler($event) {
              return ctx.selectPrevious($event);
            });
          }

          if (rf & 2) {
            _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("role", ctx.role)("tabindex", ctx.tabindex);
          }
        },
        features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([RADIO_CONTROL_VALUE_ACCESSOR$1])]
      });
      /** @nocollapse */

      ButtonRadioGroupDirective.ctorParameters = function () {
        return [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
        }];
      };

      ButtonRadioGroupDirective.propDecorators = {
        role: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['attr.role']
        }],
        radioButtons: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
          args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
          /**
          * @return {?}
          */
          function () {
            return ButtonRadioDirective;
          })]
        }],
        tabindex: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
          args: ['attr.tabindex']
        }],
        onFocus: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['focus']
        }],
        onBlur: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['blur']
        }],
        selectNext: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['keydown.ArrowRight', ['$event']]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['keydown.ArrowDown', ['$event']]
        }],
        selectPrevious: [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['keydown.ArrowLeft', ['$event']]
        }, {
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
          args: ['keydown.ArrowUp', ['$event']]
        }]
      };

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ButtonRadioGroupDirective, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
          args: [{
            selector: '[btnRadioGroup]',
            providers: [RADIO_CONTROL_VALUE_ACCESSOR$1]
          }]
        }], function () {
          return [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"]
          }];
        }, {
          role: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['attr.role']
          }],
          tabindex: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"],
            args: ['attr.tabindex']
          }],

          /**
           * @return {?}
           */
          onFocus: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['focus']
          }],

          /**
           * @return {?}
           */
          onBlur: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['blur']
          }],

          /**
           * @param {?} event
           * @return {?}
           */
          selectNext: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['keydown.ArrowRight', ['$event']]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['keydown.ArrowDown', ['$event']]
          }],

          /**
           * @param {?} event
           * @return {?}
           */
          selectPrevious: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['keydown.ArrowLeft', ['$event']]
          }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"],
            args: ['keydown.ArrowUp', ['$event']]
          }],
          radioButtons: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ContentChildren"],
            args: [Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["forwardRef"])(
            /**
            * @return {?}
            */
            function () {
              return ButtonRadioDirective;
            })]
          }]
        });
      })();

      if (false) {}
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */


      var ButtonsModule = /*#__PURE__*/function () {
        function ButtonsModule() {
          _classCallCheck(this, ButtonsModule);
        }

        _createClass(ButtonsModule, null, [{
          key: "forRoot",
          value:
          /**
           * @return {?}
           */
          function forRoot() {
            return {
              ngModule: ButtonsModule,
              providers: []
            };
          }
        }]);

        return ButtonsModule;
      }();

      ButtonsModule.ɵfac = function ButtonsModule_Factory(t) {
        return new (t || ButtonsModule)();
      };

      ButtonsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
        type: ButtonsModule
      });
      ButtonsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});

      (function () {
        (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ButtonsModule, {
          declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],
          exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]
        });
      })();

      (function () {
        (typeof ngDevMode === "undefined" || ngDevMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ButtonsModule, [{
          type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
          args: [{
            declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],
            exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]
          }]
        }], null, null);
      })();
      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */

      /**
       * @fileoverview added by tsickle
       * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
       */
      //# sourceMappingURL=ngx-bootstrap-buttons.js.map

      /***/

    },

    /***/
    "ea/W": function eaW(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "DashboardRoutingModule", function () {
        return DashboardRoutingModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/router */
      "iInd");
      /* harmony import */


      var _dashboard_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./dashboard.component */
      "U5Cf");

      var routes = [{
        path: '',
        component: _dashboard_component__WEBPACK_IMPORTED_MODULE_3__["DashboardComponent"],
        data: {
          title: 'Dashboard'
        }
      }];

      var DashboardRoutingModule = function DashboardRoutingModule() {
        _classCallCheck(this, DashboardRoutingModule);
      };

      DashboardRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]]
      })], DashboardRoutingModule);
      /***/
    }
  }]);
})();
//# sourceMappingURL=pages-dashboard-dashboard-module-es5.js.map