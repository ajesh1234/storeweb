(function () {
  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  (window["webpackJsonp"] = window["webpackJsonp"] || []).push([["pages-forgot-forgot-module"], {
    /***/
    "/ZKM": function ZKM(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmb3Jnb3QuY29tcG9uZW50LnNjc3MifQ== */";
      /***/
    },

    /***/
    "5HwS": function HwS(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ForgotComponent", function () {
        return ForgotComponent;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _raw_loader_forgot_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! raw-loader!./forgot.component.html */
      "DTN5");
      /* harmony import */


      var _forgot_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! ./forgot.component.scss */
      "/ZKM");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _services_api_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! ../../services/api.service */
      "H+bZ");
      /* harmony import */


      var _services_util_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ../../services/util.service */
      "2Rin");
      /* harmony import */


      var sweetalert2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! sweetalert2 */
      "PSD3");
      /* harmony import */


      var sweetalert2__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_7__);
      /* harmony import */


      var firebase__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(
      /*! firebase */
      "JZFu");

      var ForgotComponent = /*#__PURE__*/function () {
        function ForgotComponent(api, util, location) {
          var _this = this;

          _classCallCheck(this, ForgotComponent);

          this.api = api;
          this.util = util;
          this.location = location;
          this.div = 1;
          this.otp_id = '';
          this.email = '';
          this.otpSent = false;
          this.otp = '';
          this.password = '';
          this.confirm = '';
          this.temp = '';
          this.country_code = '';
          this.mobile = '';
          setTimeout(function () {
            _this.country_code = _this.util.default_country_code;
          }, 1000);
        }

        _createClass(ForgotComponent, [{
          key: "ngOnInit",
          value: function ngOnInit() {
            var _this2 = this;

            setTimeout(function () {
              // if (!firebase.default.app.length) {
              //   firebase.default.initializeApp(environment.firebase);
              // } else {
              //   firebase.default.app();
              // }
              _this2.recaptchaVerifier = new firebase__WEBPACK_IMPORTED_MODULE_8__["default"].auth.RecaptchaVerifier('sign-in-button', {
                size: 'invisible',
                callback: function callback(response) {},
                'expired-callback': function expiredCallback() {}
              });
            }, 5000);
          }
        }, {
          key: "onOtpChange",
          value: function onOtpChange(event) {
            console.log(event);
            this.otp = event;
          }
        }, {
          key: "goToTabs",
          value: function goToTabs() {
            var _this3 = this;

            var emailfilter = /^[\w._-]+[+]?[\w._-]+@[\w.-]+\.[a-zA-Z]{2,6}$/;

            if (!emailfilter.test(this.email)) {
              this.util.error(this.util.translate('Please enter valid email'));
              return false;
            }

            console.log('login');
            this.util.show();
            this.api.post_public('v1/auth/verifyEmailForReset', {
              email: this.email
            }).then(function (data) {
              console.log(data);

              _this3.util.hide();

              if (data && data.status && data.status === 200 && data.data === true && data.otp_id) {
                // send otp from api
                // this.openVerificationModal(data.otp_id, this.login.email, this.login);
                _this3.otpSent = true;
                _this3.otp_id = data.otp_id;
              } else if (data && data.status && data.status === 500 && data.data === false) {
                _this3.util.error(data.message);
              }
            }, function (error) {
              _this3.util.hide();

              _this3.util.apiErrorHandler(error);
            })["catch"](function (error) {
              _this3.util.hide();

              console.log(error);

              _this3.util.apiErrorHandler(error);
            });
          }
        }, {
          key: "goToBack",
          value: function goToBack() {
            this.location.back();
          }
        }, {
          key: "sendPhoneOTP",
          value: function sendPhoneOTP() {
            var _this4 = this;

            if (this.util.smsGateway == '2') {
              var param = {
                country_code: '+' + this.country_code,
                mobile: this.mobile
              };
              this.util.show();
              this.api.post_public('v1/auth/verifyPhoneForFirebase', param).then(function (data) {
                console.log(data);

                _this4.util.hide();

                if (data && data.status && data.status == 200 && data.data) {
                  console.log('open firebase web version');

                  _this4.util.show();

                  _this4.api.signInWithPhoneNumber(_this4.recaptchaVerifier, param.country_code + param.mobile).then(function (success) {
                    _this4.util.hide();

                    _this4.otpSent = true;
                  })["catch"](function (error) {
                    _this4.util.hide();

                    console.log(error);

                    _this4.util.error(error);
                  });
                }
              }, function (error) {
                _this4.util.hide();

                _this4.util.apiErrorHandler(error);
              })["catch"](function (error) {
                _this4.util.hide();

                console.log(error);

                _this4.util.apiErrorHandler(error);
              });
            } else {
              this.util.show();
              var _param = {
                country_code: '+' + this.country_code,
                mobile: this.mobile,
                type: 'store'
              };
              this.api.post_public('v1/otp/verifyPhone', _param).then(function (data) {
                console.log(data);

                _this4.util.hide();

                if (data && data.status && data.status == 200 && data.data == true && data.otp_id) {
                  _this4.otp_id = data.otp_id;
                  _this4.otpSent = true;
                } else if (data && data.status && data.status == 500 && data.data == false) {
                  _this4.util.error(_this4.util.translate('Something went wrong'));
                }
              }, function (error) {
                _this4.util.hide();

                _this4.util.apiErrorHandler(error);
              })["catch"](function (error) {
                _this4.util.hide();

                console.log(error);

                _this4.util.apiErrorHandler(error);
              });
            }
          }
        }, {
          key: "verifyOTP",
          value: function verifyOTP() {
            if (this.otp == '' || this.otp == null || !this.otp) {
              this.util.error('OTP is required');
              return false;
            }

            console.log(this.otp_id, this.otp, this.util.reset_pwd); // this.div = 2;

            if (this.util.reset_pwd == 0) {
              this.verifyEmailOTP();
            } else if (this.util.smsGateway == '2' && this.util.reset_pwd == 1) {
              this.verifyFirebaseOTP();
            } else if (this.util.reset_pwd == 1 && this.util.smsGateway != '2') {
              this.verifyPhoneOTP();
            }
          }
        }, {
          key: "verifyEmailOTP",
          value: function verifyEmailOTP() {
            var _this5 = this;

            var param = {
              id: this.otp_id,
              otp: this.otp,
              type: 'email',
              email: this.email,
              country_code: 'NA',
              mobile: 'NA'
            };
            this.util.show();
            this.api.post_public('v1/otp/verifyOTPReset', param).then(function (data) {
              console.log(data);

              _this5.util.hide();

              if (data && data.status && data.status === 200 && data.data) {
                _this5.div = 2;
                _this5.temp = data.temp;
                console.log('temp token', _this5.temp);
              }
            }, function (error) {
              _this5.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this5.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this5.util.error(error.error.error);

                return false;
              }

              _this5.util.hide();

              _this5.util.error(_this5.util.translate('Wrong OTP'));
            })["catch"](function (error) {
              _this5.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this5.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this5.util.error(error.error.error);

                return false;
              }

              _this5.util.hide();

              _this5.util.error(_this5.util.translate('Wrong OTP'));
            });
          }
        }, {
          key: "verifyFirebaseOTP",
          value: function verifyFirebaseOTP() {
            var _this6 = this;

            this.util.show();
            this.api.enterVerificationCode(this.otp).then(function (userData) {
              _this6.util.hide();

              _this6.generateTokenFromCreds();

              console.log(userData);
            })["catch"](function (error) {
              console.log(error);

              _this6.util.hide();

              _this6.util.error(error);
            });
          }
        }, {
          key: "generateTokenFromCreds",
          value: function generateTokenFromCreds() {
            var _this7 = this;

            this.util.show();
            var param = {
              country_code: '+' + this.country_code,
              mobile: this.mobile
            };
            this.api.post_public('v1/otp/generateTempToken', param).then(function (data) {
              console.log(data);

              _this7.util.hide();

              if (data && data.status && data.status == 200) {
                _this7.div = 2;
                _this7.temp = data.temp;
                console.log('temp token', _this7.temp);
              }
            }, function (error) {
              _this7.util.hide();

              _this7.util.apiErrorHandler(error);
            })["catch"](function (error) {
              _this7.util.hide();

              console.log(error);

              _this7.util.apiErrorHandler(error);
            });
          }
        }, {
          key: "verifyPhoneOTP",
          value: function verifyPhoneOTP() {
            var _this8 = this;

            var param = {
              id: this.otp_id,
              otp: this.otp,
              type: 'phone',
              email: 'NA',
              country_code: '+' + this.country_code,
              mobile: this.mobile
            };
            this.util.show();
            this.api.post_public('v1/otp/verifyOTPReset', param).then(function (data) {
              console.log(data);

              _this8.util.hide();

              if (data && data.status && data.status === 200 && data.data) {
                _this8.div = 2;
                _this8.temp = data.temp;
                console.log('temp token', _this8.temp);
              }
            }, function (error) {
              _this8.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this8.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this8.util.error(error.error.error);

                return false;
              }

              _this8.util.hide();

              _this8.util.error(_this8.util.translate('Wrong OTP'));
            })["catch"](function (error) {
              _this8.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this8.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this8.util.error(error.error.error);

                return false;
              }

              _this8.util.hide();

              _this8.util.error(_this8.util.translate('Wrong OTP'));
            });
          }
        }, {
          key: "updatePassword",
          value: function updatePassword() {
            if (this.password == '' || this.password == null || !this.password || this.confirm == '' || this.confirm == null || !this.confirm) {
              this.util.error('Password is required');
              return false;
            }

            if (this.password != this.confirm) {
              this.util.error(this.util.translate('Password does not match'));
              return false;
            }

            console.log('update');

            if (this.util.reset_pwd == 0) {
              this.updatePasswordWithEmail();
            } else if (this.util.smsGateway == '2' && this.util.reset_pwd == 1) {
              this.updatePasswordFromFirebase();
            } else if (this.util.reset_pwd == 1 && this.util.smsGateway != '2') {
              this.updatePasswordWithPhone();
            }
          }
        }, {
          key: "updatePasswordWithEmail",
          value: function updatePasswordWithEmail() {
            var _this9 = this;

            var param = {
              id: this.otp_id,
              email: this.email,
              password: this.password
            };
            this.util.show();
            this.api.post_temp('v1/password/updateUserPasswordWithEmail', param, this.temp).then(function (data) {
              console.log(data);

              _this9.util.hide();

              if (data && data.status && data.status === 200 && data.data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                  position: 'top-end',
                  icon: 'success',
                  title: _this9.util.translate('Password Updated'),
                  showConfirmButton: false,
                  timer: 1500
                });

                _this9.location.back();
              }
            }, function (error) {
              _this9.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this9.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this9.util.error(error.error.error);

                return false;
              }

              _this9.util.hide();

              _this9.util.error(_this9.util.translate('Wrong OTP'));
            })["catch"](function (error) {
              _this9.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this9.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this9.util.error(error.error.error);

                return false;
              }

              _this9.util.hide();

              _this9.util.error(_this9.util.translate('Wrong OTP'));
            });
          }
        }, {
          key: "updatePasswordFromFirebase",
          value: function updatePasswordFromFirebase() {
            var _this10 = this;

            var param = {
              country_code: '+' + this.country_code,
              mobile: this.mobile,
              password: this.password
            };
            this.api.post_temp('v1/password/updatePasswordFromFirebase', param, this.temp).then(function (data) {
              console.log(data);

              _this10.util.hide();

              if (data && data.status && data.status === 200 && data.data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                  position: 'top-end',
                  icon: 'success',
                  title: _this10.util.translate('Password Updated'),
                  showConfirmButton: false,
                  timer: 1500
                });

                _this10.location.back();
              }
            }, function (error) {
              _this10.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this10.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this10.util.error(error.error.error);

                return false;
              }

              _this10.util.hide();

              _this10.util.error(_this10.util.translate('Wrong OTP'));
            })["catch"](function (error) {
              _this10.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this10.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this10.util.error(error.error.error);

                return false;
              }

              _this10.util.hide();

              _this10.util.error(_this10.util.translate('Wrong OTP'));
            });
          }
        }, {
          key: "updatePasswordWithPhone",
          value: function updatePasswordWithPhone() {
            var _this11 = this;

            var param = {
              id: this.otp_id,
              country_code: '+' + this.country_code,
              mobile: this.mobile,
              password: this.password,
              key: '+' + this.country_code + this.mobile
            };
            this.api.post_temp('v1/password/updateUserPasswordWithPhone', param, this.temp).then(function (data) {
              console.log(data);

              _this11.util.hide();

              if (data && data.status && data.status === 200 && data.data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                  position: 'top-end',
                  icon: 'success',
                  title: _this11.util.translate('Password Updated'),
                  showConfirmButton: false,
                  timer: 1500
                });

                _this11.location.back();
              }
            }, function (error) {
              _this11.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this11.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this11.util.error(error.error.error);

                return false;
              }

              _this11.util.hide();

              _this11.util.error(_this11.util.translate('Wrong OTP'));
            })["catch"](function (error) {
              _this11.util.hide();

              console.log(error);

              if (error && error.status === 401 && error.error.error) {
                _this11.util.error(error.error.error);

                return false;
              }

              if (error && error.status === 500 && error.error.error) {
                _this11.util.error(error.error.error);

                return false;
              }

              _this11.util.hide();

              _this11.util.error(_this11.util.translate('Wrong OTP'));
            });
          }
        }]);

        return ForgotComponent;
      }();

      ForgotComponent.ctorParameters = function () {
        return [{
          type: _services_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"]
        }, {
          type: _services_util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"]
        }, {
          type: _angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"]
        }];
      };

      ForgotComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'app-forgot',
        template: _raw_loader_forgot_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_forgot_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
      }), Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_services_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"], _services_util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"], _angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"]])], ForgotComponent);
      /***/
    },

    /***/
    "DTN5": function DTN5(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony default export */


      __webpack_exports__["default"] = "<ngx-spinner></ngx-spinner>\n<div id=\"sign-in-button\"></div>\n<div class=\"app-body\">\n    <main class=\"main d-flex align-items-center login\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-6 mx-auto\">\n                    <div class=\"card-group\">\n                        <div class=\"card p-4\">\n                            <div class=\"card-body\">\n                                <form *ngIf=\"util.reset_pwd == 0 && div == 1\">\n                                    <div style=\"text-align: center;\">\n                                        <img src=\"assets/img/brand/big_logo.png\" class=\"logo\">\n                                    </div>\n                                    <h1>{{util.translate('Reset Password')}}</h1>\n                                    <p class=\"text-muted\">{{util.translate('Send OTP')}}</p>\n\n                                    <div class=\"input-group mb-3\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"cil-at\"></i></span>\n                                        </div>\n                                        <input type=\"email\" class=\"form-control\" [(ngModel)]=\"email\"\n                                            [placeholder]=\"util.translate('Email address')\" autocomplete=\"email\"\n                                            required [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n                                    <div class=\"otp_content\" *ngIf=\"otpSent == true\">\n                                        <p>{{util.translate('Enter OTP')}} </p>\n                                        <ng-otp-input (onInputChange)=\"onOtpChange($event)\"\n                                            [config]=\"{length:6,inputStyles:{'width': '40px','height': '40px','border':'1px solid lightgray','background-color':'white'}}\">\n                                        </ng-otp-input>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <button type=\"button\" class=\"btn btn-primary px-4\" *ngIf=\"otpSent ==false\"\n                                                (click)=\"goToTabs()\">{{util.translate('Send OTP')}}</button>\n                                            <button type=\"button\" class=\"btn btn-primary px-4\" *ngIf=\"otpSent ==true\"\n                                                (click)=\"verifyOTP()\">{{util.translate('Verify OTP')}}</button>\n                                        </div>\n                                    </div>\n\n                                </form>\n\n                                <form *ngIf=\"util.reset_pwd == 0 &&  div == 2\">\n                                    <div style=\"text-align: center;\">\n                                        <img src=\"assets/img/brand/big_logo.png\" class=\"logo\">\n                                    </div>\n                                    <h1>{{util.translate('Reset Password')}}</h1>\n                                    <p class=\"text-muted\">{{util.translate('Update Password')}}</p>\n\n                                    <div class=\"input-group mb-4\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"icon-lock\"></i></span>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"password\"\n                                            [placeholder]=\"util.translate('Password')\" autocomplete=\"current-password\"\n                                            required [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n\n                                    <div class=\"input-group mb-4\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"icon-lock\"></i></span>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"confirm\"\n                                            [placeholder]=\"util.translate('Confirm Password')\"\n                                            autocomplete=\"current-password\" required\n                                            [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n\n\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <button type=\"button\" class=\"btn btn-primary px-4\"\n                                                (click)=\"updatePassword()\">{{util.translate('Update')}}</button>\n                                        </div>\n                                    </div>\n\n                                </form>\n\n                                <form *ngIf=\"util.reset_pwd == 1 && div == 1\">\n                                    <div style=\"text-align: center;\">\n                                        <img src=\"assets/img/brand/big_logo.png\" class=\"logo\">\n                                    </div>\n                                    <h1>{{util.translate('Reset Password')}}</h1>\n                                    <p class=\"text-muted\">{{util.translate('Send OTP')}}</p>\n\n                                    <div class=\"row\">\n                                        <div class=\"col-3\">\n                                            <div *ngIf=\"util.countrys?.length\">\n                                                <select id=\"ccmonth\" [(ngModel)]=\"country_code\"\n                                                    [ngModelOptions]=\"{standalone: true}\" class=\"form-control\">\n                                                    <option *ngFor=\"let item of util.countrys\"\n                                                        [value]=\"item.dialling_code\">\n                                                        {{item.country_name}} </option>\n                                                </select>\n                                            </div>\n                                            <div *ngIf=\"!util.countrys?.length\">\n                                                <input type=\"tel\" class=\"form-control\" [(ngModel)]=\"country_code\"\n                                                    [placeholder]=\"util.translate('Country Code')\" [disabled]=\"true\"\n                                                    autocomplete=\"phone\" required [ngModelOptions]=\"{standalone: true}\">\n                                            </div>\n                                        </div>\n                                        <div class=\"col-9\">\n                                            <div class=\"input-group mb-3\">\n                                                <div class=\"input-group-prepend\">\n                                                    <span class=\"input-group-text\"><i class=\"cil-phone\"></i></span>\n                                                </div>\n                                                <input type=\"number\" class=\"form-control\" [(ngModel)]=\"mobile\"\n                                                    [placeholder]=\"util.translate('Phone')\" autocomplete=\"phone\"\n                                                    required [ngModelOptions]=\"{standalone: true}\">\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"otp_content\" *ngIf=\"otpSent == true\">\n                                        <p>Enter OTP</p>\n                                        <ng-otp-input (onInputChange)=\"onOtpChange($event)\"\n                                            [config]=\"{length:6,inputStyles:{'width': '40px','height': '40px','border':'1px solid lightgray','background-color':'white'}}\">\n                                        </ng-otp-input>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <button type=\"button\" class=\"btn btn-primary px-4\" *ngIf=\"otpSent ==false\"\n                                                (click)=\"sendPhoneOTP()\">{{util.translate('Send OTP')}}</button>\n                                            <button type=\"button\" class=\"btn btn-primary px-4\" *ngIf=\"otpSent ==true\"\n                                                (click)=\"verifyOTP()\">{{util.translate('Verify OTP')}}</button>\n                                        </div>\n                                    </div>\n\n                                </form>\n\n                                <form *ngIf=\"util.reset_pwd == 1 &&  div == 2\">\n                                    <div style=\"text-align: center;\">\n                                        <img src=\"assets/img/brand/big_logo.png\" class=\"logo\">\n                                    </div>\n                                    <h1>{{util.translate('Reset Password')}}</h1>\n                                    <p class=\"text-muted\">{{util.translate('Update Password')}}</p>\n\n                                    <div class=\"input-group mb-4\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"icon-lock\"></i></span>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"password\"\n                                            [placeholder]=\"util.translate('Password')\" autocomplete=\"current-password\"\n                                            required [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n\n                                    <div class=\"input-group mb-4\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"icon-lock\"></i></span>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"confirm\"\n                                            [placeholder]=\"util.translate('Confirm Password')\"\n                                            autocomplete=\"current-password\" required\n                                            [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n\n\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <button type=\"button\" class=\"btn btn-primary px-4\"\n                                                (click)=\"updatePassword()\">{{util.translate('Update')}}</button>\n                                        </div>\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </main>\n</div>";
      /***/
    },

    /***/
    "Ityv": function Ityv(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ForgotModule", function () {
        return ForgotModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/common */
      "SVse");
      /* harmony import */


      var _forgot_routing_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! ./forgot-routing.module */
      "XRev");
      /* harmony import */


      var _forgot_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! ./forgot.component */
      "5HwS");
      /* harmony import */


      var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(
      /*! @angular/forms */
      "s7LF");
      /* harmony import */


      var ngx_spinner__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(
      /*! ngx-spinner */
      "7g+E");
      /* harmony import */


      var ng_otp_input__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(
      /*! ng-otp-input */
      "BstE");

      var ForgotModule = function ForgotModule() {
        _classCallCheck(this, ForgotModule);
      };

      ForgotModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [_forgot_component__WEBPACK_IMPORTED_MODULE_4__["ForgotComponent"]],
        imports: [_angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"], _forgot_routing_module__WEBPACK_IMPORTED_MODULE_3__["ForgotRoutingModule"], _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"], ngx_spinner__WEBPACK_IMPORTED_MODULE_6__["NgxSpinnerModule"], ng_otp_input__WEBPACK_IMPORTED_MODULE_7__["NgOtpInputModule"]]
      })], ForgotModule);
      /***/
    },

    /***/
    "XRev": function XRev(module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony export (binding) */


      __webpack_require__.d(__webpack_exports__, "ForgotRoutingModule", function () {
        return ForgotRoutingModule;
      });
      /* harmony import */


      var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! tslib */
      "mrSG");
      /* harmony import */


      var _forgot_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! ./forgot.component */
      "5HwS");
      /* harmony import */


      var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @angular/core */
      "8Y7J");
      /* harmony import */


      var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @angular/router */
      "iInd");

      var routes = [{
        path: '',
        component: _forgot_component__WEBPACK_IMPORTED_MODULE_1__["ForgotComponent"]
      }];

      var ForgotRoutingModule = function ForgotRoutingModule() {
        _classCallCheck(this, ForgotRoutingModule);
      };

      ForgotRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"]]
      })], ForgotRoutingModule);
      /***/
    }
  }]);
})();
//# sourceMappingURL=pages-forgot-forgot-module-es5.js.map