(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["pages-forgot-forgot-module"],{

/***/ "/ZKM":
/*!****************************************************!*\
  !*** ./src/app/pages/forgot/forgot.component.scss ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJmb3Jnb3QuY29tcG9uZW50LnNjc3MifQ== */");

/***/ }),

/***/ "5HwS":
/*!**************************************************!*\
  !*** ./src/app/pages/forgot/forgot.component.ts ***!
  \**************************************************/
/*! exports provided: ForgotComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForgotComponent", function() { return ForgotComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _raw_loader_forgot_component_html__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! raw-loader!./forgot.component.html */ "DTN5");
/* harmony import */ var _forgot_component_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./forgot.component.scss */ "/ZKM");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _services_api_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/api.service */ "H+bZ");
/* harmony import */ var _services_util_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services/util.service */ "2Rin");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! sweetalert2 */ "PSD3");
/* harmony import */ var sweetalert2__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(sweetalert2__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var firebase__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! firebase */ "JZFu");









let ForgotComponent = class ForgotComponent {
    constructor(api, util, location) {
        this.api = api;
        this.util = util;
        this.location = location;
        this.div = 1;
        this.otp_id = '';
        this.email = '';
        this.otpSent = false;
        this.otp = '';
        this.password = '';
        this.confirm = '';
        this.temp = '';
        this.country_code = '';
        this.mobile = '';
        setTimeout(() => {
            this.country_code = this.util.default_country_code;
        }, 1000);
    }
    ngOnInit() {
        setTimeout(() => {
            // if (!firebase.default.app.length) {
            //   firebase.default.initializeApp(environment.firebase);
            // } else {
            //   firebase.default.app();
            // }
            this.recaptchaVerifier = new firebase__WEBPACK_IMPORTED_MODULE_8__["default"].auth.RecaptchaVerifier('sign-in-button', {
                size: 'invisible',
                callback: (response) => {
                },
                'expired-callback': () => {
                }
            });
        }, 5000);
    }
    onOtpChange(event) {
        console.log(event);
        this.otp = event;
    }
    goToTabs() {
        const emailfilter = /^[\w._-]+[+]?[\w._-]+@[\w.-]+\.[a-zA-Z]{2,6}$/;
        if (!emailfilter.test(this.email)) {
            this.util.error(this.util.translate('Please enter valid email'));
            return false;
        }
        console.log('login');
        this.util.show();
        this.api.post_public('v1/auth/verifyEmailForReset', { email: this.email }).then((data) => {
            console.log(data);
            this.util.hide();
            if (data && data.status && data.status === 200 && data.data === true && data.otp_id) {
                // send otp from api
                // this.openVerificationModal(data.otp_id, this.login.email, this.login);
                this.otpSent = true;
                this.otp_id = data.otp_id;
            }
            else if (data && data.status && data.status === 500 && data.data === false) {
                this.util.error(data.message);
            }
        }, error => {
            this.util.hide();
            this.util.apiErrorHandler(error);
        }).catch((error) => {
            this.util.hide();
            console.log(error);
            this.util.apiErrorHandler(error);
        });
    }
    goToBack() {
        this.location.back();
    }
    sendPhoneOTP() {
        if (this.util.smsGateway == '2') {
            const param = {
                country_code: '+' + this.country_code,
                mobile: this.mobile
            };
            this.util.show();
            this.api.post_public('v1/auth/verifyPhoneForFirebase', param).then((data) => {
                console.log(data);
                this.util.hide();
                if (data && data.status && data.status == 200 && data.data) {
                    console.log('open firebase web version');
                    this.util.show();
                    this.api.signInWithPhoneNumber(this.recaptchaVerifier, param.country_code + param.mobile).then(success => {
                        this.util.hide();
                        this.otpSent = true;
                    }).catch(error => {
                        this.util.hide();
                        console.log(error);
                        this.util.error(error);
                    });
                }
            }, error => {
                this.util.hide();
                this.util.apiErrorHandler(error);
            }).catch((error) => {
                this.util.hide();
                console.log(error);
                this.util.apiErrorHandler(error);
            });
        }
        else {
            this.util.show();
            const param = {
                country_code: '+' + this.country_code,
                mobile: this.mobile,
                type: 'store'
            };
            this.api.post_public('v1/otp/verifyPhone', param).then((data) => {
                console.log(data);
                this.util.hide();
                if (data && data.status && data.status == 200 && data.data == true && data.otp_id) {
                    this.otp_id = data.otp_id;
                    this.otpSent = true;
                }
                else if (data && data.status && data.status == 500 && data.data == false) {
                    this.util.error(this.util.translate('Something went wrong'));
                }
            }, error => {
                this.util.hide();
                this.util.apiErrorHandler(error);
            }).catch((error) => {
                this.util.hide();
                console.log(error);
                this.util.apiErrorHandler(error);
            });
        }
    }
    verifyOTP() {
        if (this.otp == '' || this.otp == null || !this.otp) {
            this.util.error('OTP is required');
            return false;
        }
        console.log(this.otp_id, this.otp, this.util.reset_pwd);
        // this.div = 2;
        if (this.util.reset_pwd == 0) {
            this.verifyEmailOTP();
        }
        else if (this.util.smsGateway == '2' && this.util.reset_pwd == 1) {
            this.verifyFirebaseOTP();
        }
        else if (this.util.reset_pwd == 1 && this.util.smsGateway != '2') {
            this.verifyPhoneOTP();
        }
    }
    verifyEmailOTP() {
        const param = {
            id: this.otp_id,
            otp: this.otp,
            type: 'email',
            email: this.email,
            country_code: 'NA',
            mobile: 'NA'
        };
        this.util.show();
        this.api.post_public('v1/otp/verifyOTPReset', param).then((data) => {
            console.log(data);
            this.util.hide();
            if (data && data.status && data.status === 200 && data.data) {
                this.div = 2;
                this.temp = data.temp;
                console.log('temp token', this.temp);
            }
        }, error => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        }).catch((error) => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        });
    }
    verifyFirebaseOTP() {
        this.util.show();
        this.api.enterVerificationCode(this.otp).then(userData => {
            this.util.hide();
            this.generateTokenFromCreds();
            console.log(userData);
        }).catch(error => {
            console.log(error);
            this.util.hide();
            this.util.error(error);
        });
    }
    generateTokenFromCreds() {
        this.util.show();
        const param = {
            country_code: '+' + this.country_code,
            mobile: this.mobile
        };
        this.api.post_public('v1/otp/generateTempToken', param).then((data) => {
            console.log(data);
            this.util.hide();
            if (data && data.status && data.status == 200) {
                this.div = 2;
                this.temp = data.temp;
                console.log('temp token', this.temp);
            }
        }, error => {
            this.util.hide();
            this.util.apiErrorHandler(error);
        }).catch((error) => {
            this.util.hide();
            console.log(error);
            this.util.apiErrorHandler(error);
        });
    }
    verifyPhoneOTP() {
        const param = {
            id: this.otp_id,
            otp: this.otp,
            type: 'phone',
            email: 'NA',
            country_code: '+' + this.country_code,
            mobile: this.mobile
        };
        this.util.show();
        this.api.post_public('v1/otp/verifyOTPReset', param).then((data) => {
            console.log(data);
            this.util.hide();
            if (data && data.status && data.status === 200 && data.data) {
                this.div = 2;
                this.temp = data.temp;
                console.log('temp token', this.temp);
            }
        }, error => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        }).catch((error) => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        });
    }
    updatePassword() {
        if (this.password == '' || this.password == null || !this.password || this.confirm == '' || this.confirm == null || !this.confirm) {
            this.util.error('Password is required');
            return false;
        }
        if (this.password != this.confirm) {
            this.util.error(this.util.translate('Password does not match'));
            return false;
        }
        console.log('update');
        if (this.util.reset_pwd == 0) {
            this.updatePasswordWithEmail();
        }
        else if (this.util.smsGateway == '2' && this.util.reset_pwd == 1) {
            this.updatePasswordFromFirebase();
        }
        else if (this.util.reset_pwd == 1 && this.util.smsGateway != '2') {
            this.updatePasswordWithPhone();
        }
    }
    updatePasswordWithEmail() {
        const param = {
            id: this.otp_id,
            email: this.email,
            password: this.password
        };
        this.util.show();
        this.api.post_temp('v1/password/updateUserPasswordWithEmail', param, this.temp).then((data) => {
            console.log(data);
            this.util.hide();
            if (data && data.status && data.status === 200 && data.data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    position: 'top-end',
                    icon: 'success',
                    title: this.util.translate('Password Updated'),
                    showConfirmButton: false,
                    timer: 1500
                });
                this.location.back();
            }
        }, error => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        }).catch((error) => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        });
    }
    updatePasswordFromFirebase() {
        const param = {
            country_code: '+' + this.country_code,
            mobile: this.mobile,
            password: this.password,
        };
        this.api.post_temp('v1/password/updatePasswordFromFirebase', param, this.temp).then((data) => {
            console.log(data);
            this.util.hide();
            if (data && data.status && data.status === 200 && data.data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    position: 'top-end',
                    icon: 'success',
                    title: this.util.translate('Password Updated'),
                    showConfirmButton: false,
                    timer: 1500
                });
                this.location.back();
            }
        }, error => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        }).catch((error) => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        });
    }
    updatePasswordWithPhone() {
        const param = {
            id: this.otp_id,
            country_code: '+' + this.country_code,
            mobile: this.mobile,
            password: this.password,
            key: '+' + this.country_code + this.mobile
        };
        this.api.post_temp('v1/password/updateUserPasswordWithPhone', param, this.temp).then((data) => {
            console.log(data);
            this.util.hide();
            if (data && data.status && data.status === 200 && data.data) {
                sweetalert2__WEBPACK_IMPORTED_MODULE_7___default.a.fire({
                    position: 'top-end',
                    icon: 'success',
                    title: this.util.translate('Password Updated'),
                    showConfirmButton: false,
                    timer: 1500
                });
                this.location.back();
            }
        }, error => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        }).catch((error) => {
            this.util.hide();
            console.log(error);
            if (error && error.status === 401 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            if (error && error.status === 500 && error.error.error) {
                this.util.error(error.error.error);
                return false;
            }
            this.util.hide();
            this.util.error(this.util.translate('Wrong OTP'));
        });
    }
};
ForgotComponent.ctorParameters = () => [
    { type: _services_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"] },
    { type: _services_util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"] },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"] }
];
ForgotComponent = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_4__["Component"])({
        selector: 'app-forgot',
        template: _raw_loader_forgot_component_html__WEBPACK_IMPORTED_MODULE_1__["default"],
        styles: [_forgot_component_scss__WEBPACK_IMPORTED_MODULE_2__["default"]]
    }),
    Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"])("design:paramtypes", [_services_api_service__WEBPACK_IMPORTED_MODULE_5__["ApiService"],
        _services_util_service__WEBPACK_IMPORTED_MODULE_6__["UtilService"],
        _angular_common__WEBPACK_IMPORTED_MODULE_3__["Location"]])
], ForgotComponent);



/***/ }),

/***/ "DTN5":
/*!******************************************************************************************!*\
  !*** ./node_modules/raw-loader/dist/cjs.js!./src/app/pages/forgot/forgot.component.html ***!
  \******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ngx-spinner></ngx-spinner>\n<div id=\"sign-in-button\"></div>\n<div class=\"app-body\">\n    <main class=\"main d-flex align-items-center login\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-6 mx-auto\">\n                    <div class=\"card-group\">\n                        <div class=\"card p-4\">\n                            <div class=\"card-body\">\n                                <form *ngIf=\"util.reset_pwd == 0 && div == 1\">\n                                    <div style=\"text-align: center;\">\n                                        <img src=\"assets/img/brand/big_logo.png\" class=\"logo\">\n                                    </div>\n                                    <h1>{{util.translate('Reset Password')}}</h1>\n                                    <p class=\"text-muted\">{{util.translate('Send OTP')}}</p>\n\n                                    <div class=\"input-group mb-3\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"cil-at\"></i></span>\n                                        </div>\n                                        <input type=\"email\" class=\"form-control\" [(ngModel)]=\"email\"\n                                            [placeholder]=\"util.translate('Email address')\" autocomplete=\"email\"\n                                            required [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n                                    <div class=\"otp_content\" *ngIf=\"otpSent == true\">\n                                        <p>{{util.translate('Enter OTP')}} </p>\n                                        <ng-otp-input (onInputChange)=\"onOtpChange($event)\"\n                                            [config]=\"{length:6,inputStyles:{'width': '40px','height': '40px','border':'1px solid lightgray','background-color':'white'}}\">\n                                        </ng-otp-input>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <button type=\"button\" class=\"btn btn-primary px-4\" *ngIf=\"otpSent ==false\"\n                                                (click)=\"goToTabs()\">{{util.translate('Send OTP')}}</button>\n                                            <button type=\"button\" class=\"btn btn-primary px-4\" *ngIf=\"otpSent ==true\"\n                                                (click)=\"verifyOTP()\">{{util.translate('Verify OTP')}}</button>\n                                        </div>\n                                    </div>\n\n                                </form>\n\n                                <form *ngIf=\"util.reset_pwd == 0 &&  div == 2\">\n                                    <div style=\"text-align: center;\">\n                                        <img src=\"assets/img/brand/big_logo.png\" class=\"logo\">\n                                    </div>\n                                    <h1>{{util.translate('Reset Password')}}</h1>\n                                    <p class=\"text-muted\">{{util.translate('Update Password')}}</p>\n\n                                    <div class=\"input-group mb-4\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"icon-lock\"></i></span>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"password\"\n                                            [placeholder]=\"util.translate('Password')\" autocomplete=\"current-password\"\n                                            required [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n\n                                    <div class=\"input-group mb-4\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"icon-lock\"></i></span>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"confirm\"\n                                            [placeholder]=\"util.translate('Confirm Password')\"\n                                            autocomplete=\"current-password\" required\n                                            [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n\n\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <button type=\"button\" class=\"btn btn-primary px-4\"\n                                                (click)=\"updatePassword()\">{{util.translate('Update')}}</button>\n                                        </div>\n                                    </div>\n\n                                </form>\n\n                                <form *ngIf=\"util.reset_pwd == 1 && div == 1\">\n                                    <div style=\"text-align: center;\">\n                                        <img src=\"assets/img/brand/big_logo.png\" class=\"logo\">\n                                    </div>\n                                    <h1>{{util.translate('Reset Password')}}</h1>\n                                    <p class=\"text-muted\">{{util.translate('Send OTP')}}</p>\n\n                                    <div class=\"row\">\n                                        <div class=\"col-3\">\n                                            <div *ngIf=\"util.countrys?.length\">\n                                                <select id=\"ccmonth\" [(ngModel)]=\"country_code\"\n                                                    [ngModelOptions]=\"{standalone: true}\" class=\"form-control\">\n                                                    <option *ngFor=\"let item of util.countrys\"\n                                                        [value]=\"item.dialling_code\">\n                                                        {{item.country_name}} </option>\n                                                </select>\n                                            </div>\n                                            <div *ngIf=\"!util.countrys?.length\">\n                                                <input type=\"tel\" class=\"form-control\" [(ngModel)]=\"country_code\"\n                                                    [placeholder]=\"util.translate('Country Code')\" [disabled]=\"true\"\n                                                    autocomplete=\"phone\" required [ngModelOptions]=\"{standalone: true}\">\n                                            </div>\n                                        </div>\n                                        <div class=\"col-9\">\n                                            <div class=\"input-group mb-3\">\n                                                <div class=\"input-group-prepend\">\n                                                    <span class=\"input-group-text\"><i class=\"cil-phone\"></i></span>\n                                                </div>\n                                                <input type=\"number\" class=\"form-control\" [(ngModel)]=\"mobile\"\n                                                    [placeholder]=\"util.translate('Phone')\" autocomplete=\"phone\"\n                                                    required [ngModelOptions]=\"{standalone: true}\">\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"otp_content\" *ngIf=\"otpSent == true\">\n                                        <p>Enter OTP</p>\n                                        <ng-otp-input (onInputChange)=\"onOtpChange($event)\"\n                                            [config]=\"{length:6,inputStyles:{'width': '40px','height': '40px','border':'1px solid lightgray','background-color':'white'}}\">\n                                        </ng-otp-input>\n                                    </div>\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <button type=\"button\" class=\"btn btn-primary px-4\" *ngIf=\"otpSent ==false\"\n                                                (click)=\"sendPhoneOTP()\">{{util.translate('Send OTP')}}</button>\n                                            <button type=\"button\" class=\"btn btn-primary px-4\" *ngIf=\"otpSent ==true\"\n                                                (click)=\"verifyOTP()\">{{util.translate('Verify OTP')}}</button>\n                                        </div>\n                                    </div>\n\n                                </form>\n\n                                <form *ngIf=\"util.reset_pwd == 1 &&  div == 2\">\n                                    <div style=\"text-align: center;\">\n                                        <img src=\"assets/img/brand/big_logo.png\" class=\"logo\">\n                                    </div>\n                                    <h1>{{util.translate('Reset Password')}}</h1>\n                                    <p class=\"text-muted\">{{util.translate('Update Password')}}</p>\n\n                                    <div class=\"input-group mb-4\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"icon-lock\"></i></span>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"password\"\n                                            [placeholder]=\"util.translate('Password')\" autocomplete=\"current-password\"\n                                            required [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n\n                                    <div class=\"input-group mb-4\">\n                                        <div class=\"input-group-prepend\">\n                                            <span class=\"input-group-text\"><i class=\"icon-lock\"></i></span>\n                                        </div>\n                                        <input type=\"password\" class=\"form-control\" [(ngModel)]=\"confirm\"\n                                            [placeholder]=\"util.translate('Confirm Password')\"\n                                            autocomplete=\"current-password\" required\n                                            [ngModelOptions]=\"{standalone: true}\">\n                                    </div>\n\n\n                                    <div class=\"row\">\n                                        <div class=\"col-6\">\n                                            <button type=\"button\" class=\"btn btn-primary px-4\"\n                                                (click)=\"updatePassword()\">{{util.translate('Update')}}</button>\n                                        </div>\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </main>\n</div>");

/***/ }),

/***/ "Ityv":
/*!***********************************************!*\
  !*** ./src/app/pages/forgot/forgot.module.ts ***!
  \***********************************************/
/*! exports provided: ForgotModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForgotModule", function() { return ForgotModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common */ "SVse");
/* harmony import */ var _forgot_routing_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./forgot-routing.module */ "XRev");
/* harmony import */ var _forgot_component__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./forgot.component */ "5HwS");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/forms */ "s7LF");
/* harmony import */ var ngx_spinner__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ngx-spinner */ "7g+E");
/* harmony import */ var ng_otp_input__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ng-otp-input */ "BstE");








let ForgotModule = class ForgotModule {
};
ForgotModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
        declarations: [
            _forgot_component__WEBPACK_IMPORTED_MODULE_4__["ForgotComponent"]
        ],
        imports: [
            _angular_common__WEBPACK_IMPORTED_MODULE_2__["CommonModule"],
            _forgot_routing_module__WEBPACK_IMPORTED_MODULE_3__["ForgotRoutingModule"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_5__["FormsModule"],
            ngx_spinner__WEBPACK_IMPORTED_MODULE_6__["NgxSpinnerModule"],
            ng_otp_input__WEBPACK_IMPORTED_MODULE_7__["NgOtpInputModule"]
        ]
    })
], ForgotModule);



/***/ }),

/***/ "XRev":
/*!*******************************************************!*\
  !*** ./src/app/pages/forgot/forgot-routing.module.ts ***!
  \*******************************************************/
/*! exports provided: ForgotRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ForgotRoutingModule", function() { return ForgotRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "mrSG");
/* harmony import */ var _forgot_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./forgot.component */ "5HwS");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "8Y7J");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "iInd");




const routes = [
    {
        path: '',
        component: _forgot_component__WEBPACK_IMPORTED_MODULE_1__["ForgotComponent"]
    }
];
let ForgotRoutingModule = class ForgotRoutingModule {
};
ForgotRoutingModule = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"])([
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
        imports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"].forChild(routes)],
        exports: [_angular_router__WEBPACK_IMPORTED_MODULE_3__["RouterModule"]]
    })
], ForgotRoutingModule);



/***/ })

}]);
//# sourceMappingURL=pages-forgot-forgot-module-es2015.js.map